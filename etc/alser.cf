{
    //===================================================
    // ALS Guard main config
    //===================================================

    // comment must be start of line(excluding the leading spaces)

    //===================================================
    // 1. unguarded logs alarm, send once on startup
    //===================================================
    unguarded: {
        mail_to: "peng.gao@funplusgame.com"
    }

    //===================================================
    // 2. watch out for what logs and how
    //===================================================
    guards: 
    [
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/kernal*"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/kernal*"
            parsers:        [
                "HostLine",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/phperror*"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/phperror*"
            parsers:        [
                "PhpError",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/memcache_to.*.log"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/memcache_to*"
            parsers:        [
                "MemcacheTimeout",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/cache_set_fail.*.log"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/cache_set_fail*"
            parsers:        [
                "MemcacheFail",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/error.*.log"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/error*"
            parsers:        [
                "Error", "Mongo",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/payment.*.log"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/payment*"
            parsers:        [
                "Payment",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/slowresponse.*.log"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/slowresponse*"
            parsers:        [
                "SlowResponse",
            ]
        },
    ]
    
    //===================================================
    // 3. all avaible parsers(plugins)
    //===================================================
    parsers: 
    [
        // phperror
        //===================================================
        {
            id:     "PhpError"
            class:  "PhperrorCollectorParser"
            title:  "PhpError"
            colors: [
                "FgYellow",
                "Bright",
            ]
            sleep:          13
            beep_threshold: 1
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, msg VARCHAR(200), host CHAR(25), level CHAR(15), src VARCHAR(80));"
            //===================================================
            // insert_stmt must be like INSERT INTO (area, ts, ...)
            //===================================================
            insert_stmt:    "INSERT INTO %s(area, ts, msg, level, host, src) VALUES(?,?,?,?,?,?)"
            stats_stmt:     "SELECT COUNT(*) AS c, area, level, msg, src FROM %s where ts<=? GROUP BY area, level, msg, src ORDER BY c DESC"
            dbname:         "phperr"
            printf: "%5d %3s %12s %18s %s"
        },

        // mongo error
        //===================================================
        {
            id:     "Mongo"
            class:  "JsonCollectorParser"
            title:  "Mongo"
            colors: [
                "FgCyan",
                "Bright",
                "BgRed",
            ]
            sleep:          15
            beep_threshold: 1
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, msg VARCHAR(200));"
            insert_stmt:    "INSERT INTO %s(area, ts, msg) VALUES(?,?,?)"
            stats_stmt:     "SELECT COUNT(*) AS c, area, msg FROM %s where ts<=? GROUP BY area, msg ORDER BY c DESC"
            dbname:         "mongo"
            printf: "%5d %3s %20s %s"
            keys: [
                {
                    name: "class"
                    contains: "MongoException"
                    visible: false
                },
                {
                    name: "message"
                },
            ]
        },

        // error log
        //===================================================
        {
            id:     "Error"
            class:  "JsonCollectorParser"
            title:  "Error"
            colors: [
                "FgRed",
            ]
            sleep:          87
            beep_threshold: 60
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, cls VARCHAR(50), msg VARCHAR(200));"
            insert_stmt:    "INSERT INTO %s(area, ts, cls, msg) VALUES(?,?,?,?)"
            stats_stmt:     "SELECT COUNT(*) AS c, area, cls, msg FROM %s where ts<=? GROUP BY area, cls, msg ORDER BY c DESC"
            dbname:         "error"
            printf: "%5d %3s %20s %s"
            keys: [
                {
                    name: "class"
                    ignores: [
                        "MongoException",
                    ]
                },
                {
                    name: "message"
                    regex:  [
                        "digit",
                        "token",
                    ]
                    ignores: [
                        "Energy Error, Client: ?, Server: ?, info:batch",
                        "snsid or uid error",
                        "XP Error, Client: ?, Server: ?, info:batch",
                        "Sorry, someone has logged in on your account from another computer.",
                        "batch token error! pre cur",
                        "payment error: OK",
                    ]
                },
            ]
        },

        // payment log
        //===================================================
        {
            id:     "Payment"
            class:  "JsonCollectorParser"
            title:  "Revenue"
            colors: [
                "FgGreen",
            ]
            sleep:          99
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, amount INT, type VARCHAR(50), currency VARCHAR(20));"
            insert_stmt:    "INSERT INTO %s(area, ts, type, currency, amount) VALUES(?,?,?,?,?)"
            stats_stmt:     "SELECT SUM(amount) AS c, area, type, currency FROM %s where ts<=? GROUP BY type, area, currency ORDER BY c DESC"
            dbname:         "payment"
            summary:        true
            printf: "%5d %3s %10s %s"
            keys: [
                {
                    name: "type"
                    contains: "OK"
                },
                {
                    name: "data.currency"
                },
                {
                    name: "data.amount"
                    type: "int"
                },
            ]
        },

        // slow response
        //===================================================
        {
            id:     "SlowResponse"
            class:  "JsonCollectorParser"
            title:  "Slow"
            colors: [
                "FgBlue",
            ]
            mail_recipents: [
                "peng.gao@funplusgamenet.com",
                "zhengkai@gmail.com"
            ]
            mail_subject_prefix:    "ALS Guard/Slow Response>10s"
            beep_threshold:         20
            sleep:                  23
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, uri VARCHAR(50));"
            insert_stmt:    "INSERT INTO %s(area, ts, uri) VALUES(?,?,?)"
            stats_stmt:     "SELECT COUNT(*) AS c, area, uri FROM %s WHERE ts<=? GROUP BY area, uri ORDER BY c DESC"
            dbname:         "slowresp"
            printf: "%5d %3s %60s"
            keys: [
                {
                    name: "_log_info.uri"
                },
            ]
        },

        // memcache set fail
        //===================================================
        {
            id:     "MemcacheFail"
            class:  "JsonLineParser"
            colors: [
                "FgYellow",
            ]
            printf: "%3s %16s %5.2f %40s"
            keys:   [
                {
                    name: "key"
                },
                {
                    name: "timeout"
                    type: "float"
                },
                {
                    name: "_log_info.host"
                }
            ]
            mail_recipents: [
                "peng.gao@funplusgamenet.com",
                "zhengkai@gmail.com"
            ]
            mail_subject_prefix: "ALS Guard/MemcacheFail"
        },

        // memcache timeout
        //===================================================
        {
            id:     "MemcacheTimeout"
            class:  "JsonLineParser"
            colors: [
                "FgYellow",
            ]
            printf: "%3s %16s %5.2f %40s"
            keys:   [
                {
                    name: "key"
                },
                {
                    name: "to"
                },
                {
                    name: "_log_info.host"
                }
            ]
            mail_recipents: [
                "peng.gao@funplusgamenet.com",
                "zhengkai@gmail.com"
            ]
            mail_subject_prefix: "ALS Guard/MemcacheFail"
        },

        // host ended raw text log
        //===================================================
        {
            id:     "HostLine"
            class:  "HostLineParser"
            enabled: true
            colors: [
                "FgWhite",
            ]
        },

    ]

}
