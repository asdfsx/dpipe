{
    //===================================================
    // ALS Guard main config
    //===================================================

    // comment must be start of line(excluding the leading spaces)

    //===================================================
    // 1. alarm mail settings
    //===================================================
    mail: {
        unguarded: ""
        guarded: "peng.gao@funplusgame.com,zhengkai@gmail.com,yan.zhang@funplusgame.com"
        sleep_start:    300
        sleep_step:     5
        sleep_max:      600
        sleep_min:      150
    }

    //===================================================
    // 2. watch out for what logs and how
    //===================================================
    guards: 
    [
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/quest*"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/quest*"
            format:         "als"
            parsers:        [
                "Mission",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/dau*"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/dau*"
            format:         "als"
            parsers:        [
                "Dau",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/bigdata_rcfail*"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/bigdata_rcfail*"
            format:         "als"
            parsers:        [
                "RcFail",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/kernal*"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/kernal*"
            format:         "als"
            parsers:        [
                "Kernal",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/phperror*"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/phperror*"
            format:         "als"
            parsers:        [
                "PhpError",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/mongo_slow.*.log"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/mongo_slow*"
            format:         "als"
            parsers:        [
                "MongoSlow",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/memcache_to.*.log"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/memcache_to*"
            format:         "als"
            parsers:        [
                "MemcacheSlow",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/cache_set_fail.*.log"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/cache_set_fail*"
            format:         "als"
            parsers:        [
                "MemcacheFail",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/error.*.log"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/error*"
            format:         "als"
            parsers:        [
                "Error", "Mongo",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/payment.*.log"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/payment*"
            format:         "als"
            parsers:        [
                "Revenue", "Pay",
            ]
        },
        {
            tail_glob:      "/mnt/funplus/logs/fp_rstory/slowresponse.*.log"
            history_glob:   "/mnt/funplus/logs/fp_rstory/history/slowresponse*"
            format:         "als"
            parsers:        [
                "SlowResponse",
            ]
        },
    ]
    
    //===================================================
    // 3. all avaible parsers(plugins)
    //===================================================
    parsers: 
    [
        // phperror
        //===================================================
        {
            id:     "PhpError"
            class:  "PhperrorCollectorParser"
            title:  "PhpError"
            colors: [
                "FgYellow",
                "Bright",
            ]
            sleep:          13
            beep_threshold: 1
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, msg VARCHAR(200), host CHAR(25), level CHAR(15), src VARCHAR(80));"
            //===================================================
            // insert_stmt must be like INSERT INTO (area, ts, ...)
            //===================================================
            insert_stmt:    "INSERT INTO %s(area, ts, msg, level, host, src) VALUES(?,?,?,?,?,?)"
            stats_stmt:     "SELECT COUNT(*) AS c, area, src, msg FROM %s where ts<=? GROUP BY area, src, msg ORDER BY c DESC"
            dbname:         "phperr"
            printf: "%5d %3s %18s %s"
        },

        // mongo error
        //===================================================
        {
            id:     "Mongo"
            class:  "JsonCollectorParser"
            title:  "Mongo"
            colors: [
                "FgCyan",
                "Bright",
                "BgRed",
            ]
            sleep:          15
            beep_threshold: 1
            abnormal_percent: 0.3
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, msg VARCHAR(200));"
            insert_stmt:    "INSERT INTO %s(area, ts, msg) VALUES(?,?,?)"
            stats_stmt:     "SELECT COUNT(*) AS c, area, msg FROM %s where ts<=? GROUP BY area, msg ORDER BY c DESC"
            dbname:         "mongo"
            printf: "%5d %3s %s"
            keys: [
                {
                    name: "class"
                    contain: "MongoException"
                    visible: false
                },
                {
                    name: "message"
                },
            ]
        },

        // error log
        //===================================================
        {
            id:     "Error"
            class:  "JsonCollectorParser"
            title:  "Error"
            colors: [
                "FgRed",
            ]
            sleep:          387
            beep_threshold: 120
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, cls VARCHAR(50), msg VARCHAR(200));"
            insert_stmt:    "INSERT INTO %s(area, ts, cls, msg) VALUES(?,?,?,?)"
            stats_stmt:     "SELECT COUNT(*) AS c, area, cls, msg FROM %s where ts<=? GROUP BY area, cls, msg ORDER BY c DESC"
            dbname:         "error"
            printf: "%5d %3s %20s %s"
            keys: [
                {
                    name: "class"
                    ignores: [
                        "MongoException",
                    ]
                },
                {
                    name: "message"
                    regex:  [
                        "digit",
                        "token",
                    ]
                    ignores: [
                        "Energy Error, Client: ?, Server: ?, info:batch",
                        "snsid or uid error",
                        "XP Error, Client: ?, Server: ?, info:batch",
                        "Sorry, someone has logged in on your account from another computer.",
                        "batch token error! pre cur",
                        "payment error: OK",
                    ]
                },
            ]
        },

        // Mission
        //===================================================
        {
            id:     "Mission"
            class:  "JsonCollectorParser"
            title:  "MissionComplete"
            colors: [
                "FgRed", "BgWhite",
            ]
            sleep:          909
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, mission VARCHAR(50));"
            insert_stmt:    "INSERT INTO %s(area, ts, mission) VALUES(?,?,?)"
            stats_stmt:     "SELECT COUNT(*) AS c, area, mission FROM %s where ts<=? GROUP BY area, mission ORDER BY c DESC LIMIT 10"
            dbname:         "mission"
            printf: "%5d %3s %s"
            keys: [
                {
                    name: "complete"
                },
            ]
        },

        // rc fail
        //===================================================
        {
            id:     "RcFail"
            class:  "JsonCollectorParser"
            title:  "RcFail"
            colors: [
                "FgRed", "Underscore",
            ]
            sleep:          709
            beep_threshold: 10
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, cls VARCHAR(50));"
            insert_stmt:    "INSERT INTO %s(area, ts, cls) VALUES(?,?,?)"
            stats_stmt:     "SELECT COUNT(*) AS c, area, cls FROM %s where ts<=? GROUP BY area, cls ORDER BY c DESC"
            dbname:         "rcfail"
            printf: "%5d %3s %s"
            keys: [
                {
                    name: "2"
                },
            ]
        },

        // dau
        //===================================================
        {
            id:     "Dau"
            class:  "JsonCollectorParser"
            title:  "DAU"
            colors: [
                "FgBlue",
            ]
            sleep:          180
            beep_threshold: 950
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, uid INT);"
            insert_stmt:    "INSERT INTO %s(area, ts, uid) VALUES(?,?,?)"
            stats_stmt:     "SELECT COUNT(DISTINCT(uid)) AS c, area FROM %s where ts<=? GROUP BY area ORDER BY c DESC"
            dbname:         "dau"
            printf: "%5d %3s"
            keys: [
                {
                    name: "uid"
                    type: "int"
                },
            ]
        },

        // payment type
        //===================================================
        {
            id:     "Pay"
            class:  "JsonCollectorParser"
            title:  "TryPay"
            colors: [
                "FgGreen", "Underscore",
            ]
            sleep:          79
            beep_threshold: 5
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, type VARCHAR(50));"
            insert_stmt:    "INSERT INTO %s(area, ts, type) VALUES(?,?,?)"
            stats_stmt:     "SELECT COUNT(*) AS c, area, type FROM %s where ts<=? GROUP BY area, type ORDER BY c DESC"
            dbname:         "pay"
            printf: "%5d %3s %s"
            keys: [
                {
                    name: "type"
                    ignores: [
                        "OK",
                        "start",
                    ]
                },
            ]
        },

        // revenue
        //===================================================
        {
            id:     "Revenue"
            class:  "JsonCollectorParser"
            title:  "Revenue"
            colors: [
                "FgGreen",
            ]
            sleep:          499
            beep_threshold: 1000
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, amount INT, currency VARCHAR(20));"
            insert_stmt:    "INSERT INTO %s(area, ts, currency, amount) VALUES(?,?,?,?)"
            stats_stmt:     "SELECT SUM(amount) AS c, area, currency FROM %s where ts<=? GROUP BY area, currency ORDER BY c DESC"
            dbname:         "revenue"
            summary:        true
            printf: "%5d %3s %s"
            keys: [
                {
                    name: "type"
                    contain: "OK"
                    visible: false
                },
                {
                    name: "data.currency"
                },
                {
                    name: "data.amount"
                    type: "money"
                },
            ]
        },

        // slow response
        //===================================================
        {
            id:     "SlowResponse"
            class:  "JsonCollectorParser"
            title:  "Slow"
            colors: [
                "FgMagenta", "Bright",
            ]
            sleep:                  23
            beep_threshold:         80
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, uri VARCHAR(50));"
            insert_stmt:    "INSERT INTO %s(area, ts, uri) VALUES(?,?,?)"
            stats_stmt:     "SELECT COUNT(*) AS c, area, uri FROM %s WHERE ts<=? GROUP BY area, uri ORDER BY c DESC"
            dbname:         "slowresp"
            printf: "%5d %3s %s"
            keys: [
                {
                    name: "_log_info.uri"
                },
            ]
        },

        // memcache set fail
        //===================================================
        {
            id:     "MemcacheFail"
            class:  "JsonLineParser"
            colors: [
                "FgYellow", "Underscore",
            ]
            printf: "%3s %22s %6.4f %15s"
            keys:   [
                {
                    name: "key"
                    regex:  [
                        "digit",
                    ]
                },
                {
                    name: "timeout"
                    type: "float"
                },
                {
                    name: "_log_info.host"
                }
            ]
        },

        // mongodb slow
        //===================================================
        {
            id:     "MongoSlow"
            class:  "JsonLineParser"
            colors: [
                "FgYellow", "Reverse",
            ]
            printf: "%3s %12s %8s %6.4f"
            keys:   [
                {
                    name: "table"
                },
                {
                    name: "method"
                },
                {
                    name: "ts"
                    type: "float"
                },
            ]
        },

        // memcache slow
        //===================================================
        {
            id:     "MemcacheSlow"
            class:  "JsonLineParser"
            colors: [
                "FgYellow",
            ]
            printf: "%3s %22s %6.4f %15s"
            keys:   [
                {
                    name: "key"
                    regex:  [
                        "digit",
                    ]
                },
                {
                    name: "ts"
                    type: "float"
                },
                {
                    name: "_log_info.host"
                }
            ]
        },

        // /var/log/messages
        //===================================================
        {
            id:     "Kernal"
            class:  "HostLineParser"
            enabled: true
            title:  "Kernal"
            colors: [
                "FgWhite", "Reverse",
            ]
            sleep:                  715
            beep_threshold:         858332885
            create_table:   "CREATE TABLE IF NOT EXISTS %s (area CHAR(10), ts INT, type VARCHAR(50), num INT);"
            insert_stmt:    "INSERT INTO %s(area, ts, type, num) VALUES(?,?,?,?)"
            stats_stmt:     "SELECT SUM(num) AS c, area, type FROM %s WHERE ts<=? GROUP BY area, type ORDER BY c DESC"
            dbname:         "kernal"
            printf: "%12d %3s %s"
            keys: [
                {
                    name: "data"
                    ignores: [
                        "==>",
                        "<==",
                        "dhclient",
                        "regex: child \\d+ exited with code 0",
                        "regex: child \\d+ started",
                        "you may need to increase start_servers",
                        "spawning \\d+ children",
                    ]
                },
            ]
        },

    ]

}
